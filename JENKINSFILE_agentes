pipeline {
    agent none

    stages {
        stage('Get Code') {
            agent { label 'windows' }
            steps {
                bat 'whoami && hostname && echo %WORKSPACE%'
                git 'https://github.com/Carlitos-Etobar/helloworld.git'
                bat 'dir'
                stash name: 'source-code', includes: '**'
            }
        }

        stage('Tests') {
            parallel {
                stage('Unit') {
                    agent { label 'windows' }
                    steps {
                        bat 'whoami && hostname && echo %WORKSPACE%'
                        unstash 'source-code'
                        bat '''
                            set PYTHONPATH=%WORKSPACE%
                            pytest --junitxml=result-unit.xml test\\unit
                        '''
                        stash name: 'unit-results', includes: 'result-unit.xml'
                    }
                }

                stage('Rest') {
                    agent { label 'linux' }
                    steps {
                        sh 'whoami && hostname && echo $WORKSPACE'
                        unstash 'source-code'
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            sh '''
                                export FLASK_APP=app/api.py
                                export FLASK_ENV=development
                                nohup flask run > flask.log 2>&1 &
                                curl -L -O https://repo1.maven.org/maven2/com/github/tomakehurst/wiremock-jre8-standalone/2.28.0/wiremock-jre8-standalone-2.28.0.jar
                                nohup java -jar wiremock-jre8-standalone-2.28.0.jar --port 9090 -v --root-dir test/wiremock > wiremock.log 2>&1 &
                                sleep 5
                                export PYTHONPATH=$WORKSPACE
                                pytest --junitxml=result-rest.xml test/rest
                            '''
                        }
                        stash name: 'rest-results', includes: 'result-rest.xml'
                        sh 'pkill -f flask || true && pkill -f wiremock || true'
                        deleteDir()
                    }
                }

                stage('Static') {
                    agent { label 'linux' }
                    steps {
                        sh 'whoami && hostname && echo $WORKSPACE'
                        unstash 'source-code'
                        sh '''
                            flake8 app > flake8-result.txt || exit 0
                        '''
                        recordIssues tools: [flake8()],
                            qualityGates: [
                                [threshold: 8, type: 'TOTAL', unstable: true],
                                [threshold: 10, type: 'TOTAL', failure: true]
                            ]
                    }
                }

                stage('Security') {
                    agent { label 'linux' }
                    steps {
                        sh 'whoami && hostname && echo $WORKSPACE'
                        unstash 'source-code'
                        sh '''
                            bandit -r app -f txt -o bandit-result.txt || exit 0
                        '''
                        archiveArtifacts artifacts: 'bandit-result.txt', onlyIfSuccessful: true
                    }
                }

                stage('Coverage') {
                    agent { label 'windows' }
                    steps {
                        bat 'whoami && hostname && echo %WORKSPACE%'
                        unstash 'source-code'
                        bat '''
                            set PYTHONPATH=.
                            coverage run --branch --source=app --omit=app\\__init__.py,app\\api.py -m pytest test\\unit
                            coverage xml
                        '''
                        recordCoverage(
                            tools: [[parser: 'COBERTURA', pattern: 'coverage.xml']],
                            sourceCodeRetention: 'EVERY_BUILD',
                            failOnError: false,
                            qualityGates: [
                                [threshold: 90.0, metric: 'LINE', baseline: 'PROJECT'],
                                [threshold: 80.0, metric: 'BRANCH', baseline: 'PROJECT']
                            ]
                        )
                    }
                }

                stage('Performance') {
                    agent { label 'windows' }
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            bat '''
                                call "C:\\apache-jmeter-5.6.3\\bin\\jmeter.bat" -n -t C:\\test-plan.jmx -l test\\results.jtl
                            '''
                            step([
                                $class: 'PerformancePublisher',
                                sourceDataFiles: 'test/results.jtl'
                            ])
                        }
                    }
                }
            }
        }

        stage('Results') {
            agent { label 'linux' }
            steps {
                sh 'whoami && hostname && echo $WORKSPACE'
                unstash 'unit-results'
                unstash 'rest-results'
                junit 'result*.xml'
            }
        }
    }
}
